#Лабораторная работа №1
#Написать программу, которая читая символы из бесконечной последовательности (эмулируется конечным файлом, читающимся поблочно), распознает, преобразует и выводит на экран лексемы по определенному правилу. Лексемы разделены пробелами. Преобразование делать по возможности через словарь. Для упрощения под выводом числа прописью подразумевается последовательный вывод всех цифр числа. Регулярные выражения использовать нельзя.
#Нечетные восьмеричные числа, не превышающие 409610, у которых вторая справа цифра равна 7. Выводит на экран цифры числа, исключая семерки. Вычисляется среднее число между минимальным и максимальным и выводится прописью.
digit_words = {'0': 'ноль', '1': 'один', '2': 'два', '3': 'три', '4': 'четыре', '5': 'пять', '6': 'шесть', '7': 'семь', '8':'восемь', '9':'девять'}
def number_to_words(number):
    return ' '.join(digit_words[d] for d in str(number))
def is_valid_lexeme(word):
    return all(ch in '01234567' for ch in word)
def to_decimal(oct_str):
    result = 0
    for ch in oct_str:
        result = result * 8 + int(ch)
    return result
def process_number(num):
    num_str = str(num)
    if num % 2 != 0 and len(num_str) > 1 and num_str[-2] == '7' and num <= 4096:
        result = ''.join([ch for ch in num_str if ch != '7'])
        return result
    return None
with open('C://Users//user//Desktop//11.txt', 'r') as f:
    numbers = f.read().split()
    valid_numbers = []
    for num_str in numbers:
        num = int(num_str)
        processed_number = process_number(num)
        if processed_number:
            valid_numbers.append(num)
    if valid_numbers:
        min_num = min(valid_numbers)
        max_num = max(valid_numbers)
        average = (min_num + max_num) // 2
        print("Среднее число между минимальным и максимальным:", str(number_to_words(average)).replace('семь',''))
        print("минимальным:", str(number_to_words(min_num)).replace('семь',''))
        print("максимальным:", str(number_to_words(max_num)).replace('семь',''))
